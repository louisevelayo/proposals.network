type CanisterIdRecord = record { canister_id : principal };
type CanisterStatusResult = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  module_hash : opt vec nat8;
};
type CanisterStatusType = variant { stopped; stopping; running };
type ChangeCanisterControllersError = record {
  code : opt int32;
  description : text;
};
type ChangeCanisterControllersRequest = record {
  target_canister_id : principal;
  new_controllers : vec principal;
};
type ChangeCanisterControllersResponse = record {
  change_canister_controllers_result : ChangeCanisterControllersResult;
};
type ChangeCanisterControllersResult = variant {
  Ok;
  Err : ChangeCanisterControllersError;
};
type DefiniteCanisterSettings = record { controllers : vec principal };
service : {
  canister_status : (CanisterIdRecord) -> (CanisterStatusResult);
  change_canister_controllers : (ChangeCanisterControllersRequest) -> (
      ChangeCanisterControllersResponse,
    );
  get_build_metadata : () -> (text) query;
}